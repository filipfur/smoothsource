package {{packageName}}.classes;
import {{userClassPath}}.{{className}};
[[imports|import {{classPath}};]]
[[singleRelations|import {{userClassPath}}.{{relatedClassName}};]]
[[multiRelations|import {{userClassPath}}.{{relatedClassName}};]]
<<?multiRelations|import java.util.ArrayList;
import util.AttributeMatcher;
import util.RelationManager;?>>

public class _{{className}}
{
    [[attributes:begin@// <Attributes
    @:end@ // Attributes>@|private {{attributeType}} _{{attributeName}};]]
    [[singleRelations|private {{relatedClassName}} _relationR{{relationId}};]]
    [[multiRelations|private final ArrayList<{{relatedClassName}}> _relationsR{{relationId}};]]
    
    public _{{className}}()
    {
        [[singleRelations|this._relationR{{relationId}} = null;]]
        [[multiRelations|this._relationsR{{relationId}} = new ArrayList<{{relatedClassName}}>();]]
    }
    [[attributes:begin@
    // Getter-methods@|
    public {{attributeType}} get{{attributeName:upperCC}}()
    {
        return _{{attributeName}};
    }]]
    [[attributes:begin@
    // Setter-methods@|
    public void set{{attributeName:upperCC}}({{attributeType}} {{attributeName}})
    {
        this._{{attributeName}} = {{attributeName}};
    }]]
    [[singleRelations|
    public void relateAcrossR{{relationId}}({{relatedClassName}} {{relatedClassName:lowerCC}})
    {
        if(this._relationR{{relationId}} != {{relatedClassName:lowerCC}})
        {
            this._relationR{{relationId}} = {{relatedClassName:lowerCC}};
            {{relatedClassName:lowerCC}}.relateAcrossR{{relationId}}(({{className}}) this);
        }
    }
    
    public void unrelateAcrossR{{relationId}}({{relatedClassName}} {{relatedClassName:lowerCC}})
    {
        if(this._relationR{{relationId}} == {{relatedClassName:lowerCC}})
        {
            this._relationR{{relationId}}.unrelateAcrossR{{relationId}}(({{className}}) this);
            this._relationR{{relationId}} = null;
        }
    }]]
    [[multiRelations|
    public void relateAcrossR{{relationId}}({{relatedClassName}} {{relatedClassName:lowerCC}})
    {
        if(!this._relationsR{{relationId}}.contains(car))
        {
            this._relationsR{{relationId}}.add(car);
            {{relatedClassName:lowerCC}}.relateAcrossR{{relationId}}(({{className}}) this);
        }
    }

    public void unrelateAcrossR{{relationId}}({{relatedClassName}} {{relatedClassName:lowerCC}})
    {
        if(this._relationsR{{relationId}}.remove({{relatedClassName:lowerCC}}))
        {
            {{relatedClassName:lowerCC}}.unrelateAcrossR{{relationId}}(({{className}}) this);
        }
    }]]
    [[singleRelations|
    public boolean isRelatedAcrossR{{relationId}}()
    {
        return this._relationR{{relationId}} != null;
    }

    public {{relatedClassName}} selectOneAcrossR{{relationId}}()
    {
        return this._relationR{{relationId}};
    }]]
    [[multiRelations|
    public boolean isRelatedAcrossR{{relationId}}()
    {
        return !this._relationsR{{relationId}}.isEmpty();
    }

    public ArrayList<{{relatedClassName}}> selectManyAcrossR{{relationId}}(AttributeMatcher<{{relatedClassName}}> attributeMatcher)
    {
        return RelationManager.selectMany(this._relationsR{{relationId}}, attributeMatcher);
    }

    public ArrayList<{{relatedClassName}}> selectManyAcrossR{{relationId}}()
    {
        return this._relationsR{{relationId}};
    }

    public {{relatedClassName}} selectAnyAcrossR{{relationId}}(AttributeMatcher<{{relatedClassName}}> attributeMatcher)
    {
        return RelationManager.selectAny(this._relationsR{{relationId}}, attributeMatcher);
    }

    public {{relatedClassName}} selectAnyAcrossR{{relationId}}()
    {
        return RelationManager.selectAny(this._relationsR{{relationId}});
    }]]
}